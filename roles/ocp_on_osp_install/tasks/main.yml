---
#
# Install OCP on OSP
#

- name: Copy root openshift-ansible files to /home/cloud-user/openshift-ansible
  command: cp -a /root/openshift-ansible/ /home/cloud-user/openshift-ansible
  become: true
  when: not openshift_ansible_clone | bool

- name: Set cloud-user to own /home/cloud-user/openshift-ansible
  file:
    path: /home/cloud-user/openshift-ansible
    owner: cloud-user
    group: cloud-user
    recurse: yes
  become: true
  when: not openshift_ansible_clone | bool

- name: Cloning the openshift-ansible repository
  git:
    dest: /home/cloud-user/openshift-ansible
    repo: "{{ openshift_ansible_repo }}"
    version: "{{ openshift_ansible_version }}"
    force: true
  when: openshift_ansible_clone | bool

- name: Applying patches to files in /home/cloud-user directory
  patch:
    src: "{{item}}"
    basedir: /home/cloud-user
    strip: 0
  with_items:
    - 40-glusterfs_wipefs.patch

- name: Copying the Ansible configuration file from openshift-ansible
  copy:
    remote_src: true
    src: "openshift-ansible/ansible.cfg"
    dest: /etc/ansible/ansible.cfg
  become: true

- name: Changing the Ansible configuration for this host
  lineinfile:
    dest: /etc/ansible/ansible.cfg
    regexp: "{{ item['find'] }}"
    line: "{{ item['replace'] }}"
  with_items:
    - find: "^#?log_path =.*"
      replace: "log_path = /var/tmp/ansible.log"
    - find: "^#?ssh_args =.*"
      replace: "ssh_args = -o ControlMaster=auto -o ControlPersist=600s -o ServerAliveInterval=20 -o ServerAliveCountMax=3"
  become: true

- name: Get DNS ns-master FIP
  shell: |
    . /home/cloud-user/overcloudrc
    openstack server show ns-master.{{ clusterid }}.{{ dns_domain }} --format value -c addresses | awk '{print $2}'
  register: dns_fip
  changed_when: false

- name: Reading the contents of the nsupdate file
  shell: cat /home/cloud-user/scale-ci/nsupdate_keys.yml
  register: nsupdate_contents
  changed_when: false

- name: (Kuryr) Get external network id
  shell: |
    . /home/cloud-user/overcloudrc
    openstack network show public -f value -c id
  register: openshift_kuryr_public_net_id
  when: openshift_enable_kuryr

- name: (Kuryr) Get node network id
  shell: |
    . /home/cloud-user/overcloudrc
    openstack subnet show ci_subnet -f value -c network_id
  register: openshift_kuryr_node_net_id
  when: openshift_enable_kuryr

- name: (Kuryr) Get node subnet id
  shell: |
    . /home/cloud-user/overcloudrc
    openstack subnet show ci_subnet -f value -c id
  register: openshift_kuryr_node_subnet_id
  when: openshift_enable_kuryr

- name: (Kuryr) Get router id
  shell: |
    . /home/cloud-user/overcloudrc
    openstack router show ci_router -f value -c id
  register: openshift_kuryr_router_id
  when: openshift_enable_kuryr

- name: Place templates for install
  template:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
  with_items:
    - src: chrony.conf.j2
      dest: /home/cloud-user/scale-ci/chrony.conf
    - src: all.yml.j2
      dest: /home/cloud-user/inventory/group_vars/all.yml
    - src: OSEv3.yml.j2
      dest: /home/cloud-user/inventory/group_vars/OSEv3.yml

- name: Place files for install
  copy:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
  with_items:
    - src: prepare_block_devices.yml
      dest: /home/cloud-user/scale-ci/prepare_block_devices.yml
    - src: configure_time_servers.yml
      dest: /home/cloud-user/scale-ci/configure_time_servers.yml

- name: Install OCP on OSP
  block:
    - name: Checking the prerequisites for cluster provisioning in OpenStack
      shell: |
        . /home/cloud-user/overcloudrc
        ansible-playbook -vvv --user openshift -i inventory -i openshift-ansible/playbooks/openstack/inventory.py openshift-ansible/playbooks/openstack/openshift-cluster/prerequisites.yml 2>&1 >> /home/cloud-user/scale-ci/log/openshift_prerequisites.log

    - name: Creating the OpenStack resources
      shell: |
        . /home/cloud-user/overcloudrc
        ansible-playbook -vvv --user openshift -i inventory -i openshift-ansible/playbooks/openstack/inventory.py openshift-ansible/playbooks/openstack/openshift-cluster/provision.yml 2>&1 >> /home/cloud-user/scale-ci/log/openstack_provision.log

    - name: Configuring the time servers on all the provisioned nodes
      shell: |
        . /home/cloud-user/overcloudrc
        ansible-playbook -vv --user openshift -i openshift-ansible/playbooks/openstack/inventory.py /home/cloud-user/scale-ci/configure_time_servers.yml 2>&1 >> /home/cloud-user/scale-ci/log/time_servers.log

    - name: Configuring the block devices on the master nodes
      shell: |
        . /home/cloud-user/overcloudrc
        ansible-playbook -vv --user openshift -i openshift-ansible/playbooks/openstack/inventory.py /home/cloud-user/scale-ci/prepare_block_devices.yml 2>&1 >> /home/cloud-user/scale-ci/log/block_devices.log

    - name: Installing OpenShift on OpenStack
      shell: |
        . /home/cloud-user/overcloudrc
        ansible-playbook -vvv --user openshift -i inventory -i openshift-ansible/playbooks/openstack/inventory.py openshift-ansible/playbooks/openstack/openshift-cluster/install.yml 2>&1 >> /home/cloud-user/scale-ci/log/openshift_install.log
  always:
    - name: Running commands that create debug information needed to open issues
      shell: "{{ item }} 2>&1 >> /home/cloud-user/scale-ci/log/debug_information.txt"
      with_items:
        - "printf \"$(uname -srm)\n$(cat /etc/os-release)\n\""
        - "ansible --version"
        - "cd openshift-ansible ; git describe"
        - "rpm -q atomic-openshift-utils openshift-ansible"
      ignore_errors: true

    - name: Copy logs to artifacts directory
      synchronize:
        src: /home/cloud-user/scale-ci/log
        dest: "{{artifacts_dir}}"
        mode: pull
        use_ssh_args: yes
