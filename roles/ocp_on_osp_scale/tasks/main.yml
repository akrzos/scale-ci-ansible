---
# Run the dynamic inventory to get the current app hosts.
- name: Running the dynamic inventory file to get the current app hosts
  shell: ". {{ openstack_rc }}; {{ inventory_py }} --list | jq '.openstack_compute_nodes[\"hosts\"] | length'"
  register: output
  changed_when: false

# Get the number of nodes in the app.hosts group.
- name: Setting the current node count
  set_fact:
    current_node_count: "{{ output['stdout'] }}"

# Exit if the node target is less than how many nodes that are already running.
- name: Checking the node count
  fail:
    msg: "The OpenShift node target {{ openshift_node_target }} is less than or equal to than the current node count {{ current_node_count }}"
  when: openshift_node_target|int <= current_node_count|int

# Create a variable that sources the rc file and runs the ansible-playbook command.
- name: Creating a variable that sources the OpenStack rc file and runs the ansible-playbook command
  set_fact:
    ansible_playbook: ". {{ openstack_rc }}; ansible-playbook"

# Source the rc file, set the environment varaible and run the ansible-playbook command.
- name: Creating a variable that sources the OpenStack rc file, sets OPENSTACK_SHOW_COMPUTE_NODES=false and runs the ansible-playbook command
  set_fact:
    ansible_playbook_scaleup: ". {{ openstack_rc }}; OPENSTACK_SHOW_COMPUTE_NODES=false ansible-playbook"

# Create a variable that sources the rc file and runs the OpenStack client command.
- name: Creating a variable that sources the OpenStack rc file and runs the openstack client command
  set_fact:
    openstack: ". {{ openstack_rc }}; openstack"

# Get the DNS information once before the loop.
- name: Getting the DNS information
  include_tasks: dns.yml

# Create an empty list.
- name: Creating an empty list of blocks
  set_fact:
    blocks: []

#  Create the blocks for scaling up.
- name: Creating begin and end blocks for scaling
  set_fact:
    blocks: "{{ blocks }} + [{'begin': {{ item }}, 'end': {{ (item|int + block_size|int < openshift_node_target|int)|ternary(item|int + block_size|int - 1, openshift_node_target|int - 1) }} }]"
  with_sequence: "start={{ current_node_count }} end={{ openshift_node_target|int - 1 }} stride={{ block_size }}"

# Call the scale up tasks for each block in blocks.
- name: Scaling up
  include_tasks: scaleup.yml
  with_items: "{{ blocks }}"
  loop_control:
    # The loop_var changes the variable name from item to avoid name collisions.
    loop_var: block
